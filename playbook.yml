---
- name: Desplegar Wordpress con PHP y MySQL
  hosts: servers
  become: true
  gather_facts: yes # ansible nodo1 -m setup -i inventory.ini | grep ansible_os_family
  vars:
     php_packages:
      - php
      - php-common
      - php-mysql
      - php-xml
      - php-xmlrpc
      - php-curl
      - php-gd
      - php-imagick
      - php-cli
      - php-dev
      - php-imap
      - php-mbstring
      - php-opcache
      - php-soap
      - php-zip
      - php-intl

  tasks:

    - name: Mostrar información del servidor
      debug:
        msg:
          - "=== Configurando servidor {{ inventory_hostname }} ==="
          - "IP: {{ ansible_host }}"
          - "Sistema: {{ ansible_distribution }} {{ ansible_distribution_version }}"

    - name: Actualizar cache de paquetes
      ansible.builtin.apt:
        name: '*'
        state: latest
      when: ansible_os_family == "Debian"

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    ## Paso 2 Configurar Apache2
    - name: Install apache2
      ansible.builtin.apt:
        name: apache2
        state: latest

    - name: Start apache2
      ansible.builtin.service:
        name: apache2
        state: started

    - name: Borrar index.html por defecto de Apache
      ansible.builtin.file:
        path: /var/www/html/index.html
        state: absent

    ## Paso 3 instalar php
    - name: intall php packages
      ansible.builtin.apt:
        name: "{{ php_packages }}"
        state: latest
    ## Paso 4 instalar mariadb
    - name: Install mariadb-server
      ansible.builtin.apt:
        name: mariadb-server
        state: latest
    
    - name: Instalar cliente de MariaDB
      ansible.builtin.apt:
        name: mariadb-client
        state: latest

    - name: Instalar driver Python para MariaDB/MySQL
      ansible.builtin.apt:
        name: python3-mysqldb
        state: latest
        
    - name: Asegurar que MariaDB está iniciado
      ansible.builtin.service:
        name: mariadb
        state: started

    # 1. Set root password (solo si usás auth_socket, típico en Ubuntu)
    - name: Set root password
      community.mysql.mysql_user:
        name: root
        host: localhost
        password: "test"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        check_implicit_admin: yes
        state: present

    # 2. Remove anonymous users
    - name: Remove anonymous users
      community.mysql.mysql_user:
        name: ''
        host_all: true
        state: absent
        login_user: root
        login_password: "test"
        login_unix_socket: /var/run/mysqld/mysqld.sock

    # 3. Disallow root login remotely
    - name: Disallow root login remotely
      community.mysql.mysql_user:
        name: root
        host: "{{ item }}"
        state: absent
        login_user: root
        login_password: "test"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      loop:
        - '%'
        - '::1'
        - '127.0.0.1'
      when: item != 'localhost'

    # 4. Remove test database
    - name: Remove test database
      community.mysql.mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "test"
        login_unix_socket: /var/run/mysqld/mysqld.sock

    #5. Create a database for Wordpress
    - name: Create a database for Wordpress
      community.mysql.mysql_db:
        name: wordpress_db
        state: present
        login_user: root
        login_password: "test"
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Crear usuario para WordPress
      community.mysql.mysql_user:
        name: wordpress_user
        password: "test"
        host: localhost
        priv: 'wordpress_db.*:ALL'
        state: present
        login_user: root
        login_password: "test"
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Download and unpack latest WordPress
      unarchive:
        src: https://wordpress.org/latest.tar.gz
        dest: "/var/www/html"
        remote_src: yes
        creates: "/var/www/html/wordpress"
    
    - name: Change file ownership, group and permissions
      ansible.builtin.file:
        path: /var/www/html/wordpress/
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Copiar wp-config-sample.php a wp-config.php en el nodo remoto
      ansible.builtin.copy:
        src: /var/www/html/wordpress/wp-config-sample.php
        dest: /var/www/html/wordpress/wp-config.php
        owner: www-data
        group: www-data
        mode: '0755'
        remote_src: true

    - name: Set DB_NAME in wp-config.php
      ansible.builtin.lineinfile:
        path: /var/www/html/wordpress/wp-config.php
        regexp: "^define\\s*\\(\\s*'DB_NAME'.*"
        line: "define('DB_NAME', 'wordpress_db');"
        owner: www-data
        group: www-data

    - name: Set DB_USER in wp-config.php
      ansible.builtin.lineinfile:
        path: /var/www/html/wordpress/wp-config.php
        regexp: "^define\\s*\\(\\s*'DB_USER'.*"
        line: "define('DB_USER', 'wordpress_user');"
        owner: www-data
        group: www-data

    - name: Set DB_PASSWORD in wp-config.php
      ansible.builtin.lineinfile:
        path: /var/www/html/wordpress/wp-config.php
        regexp: "^define\\s*\\(\\s*'DB_PASSWORD'.*"
        line: "define('DB_PASSWORD', 'test');"
        owner: www-data
        group: www-data

    - name: Set DB_HOST in wp-config.php
      ansible.builtin.lineinfile:
        path: /var/www/html/wordpress/wp-config.php
        regexp: "^define\\s*\\(\\s*'DB_HOST'.*"
        line: "define('DB_HOST', 'localhost');"
        owner: www-data
        group: www-data

    - name: opy the 000-default.conf file.
      ansible.builtin.copy:
        src: /etc/apache2/sites-available/000-default.conf
        dest: /etc/apache2/sites-available/wordpress.conf
        remote_src: true

    - name: Set correct DocumentRoot in wordpress.conf dentro del VirtualHost
      ansible.builtin.replace:
        path: /etc/apache2/sites-available/wordpress.conf
        regexp: 'DocumentRoot\s+/var/www/html'
        replace: 'DocumentRoot /var/www/html/wordpress'

    - name: Enable wordpress.conf site
      ansible.builtin.command: a2ensite wordpress.conf

    - name: Disable 000-default.conf site
      ansible.builtin.command: a2dissite 000-default.conf

    - name: Restart apache2  
      ansible.builtin.service:
        name: apache2
        state: restarted
      



    # - name: Eliminar configuración por defecto de Nginx
    #   file:
    #     path: /etc/nginx/sites-enabled/default
    #     state: absent

    # - name: Verificar configuración de Nginx
    #   command: nginx -t
    #   register: nginx_syntax
    #   changed_when: false

    # - name: Mostrar resultado de verificación de Nginx
    #   debug:
    #     var: nginx_syntax.stdout_lines

    # ## Paso 2 Clonar repositorio de Node.js
    # - name: Clonar repositorio de Node.js Hello World API
    #   ansible.builtin.git:
    #     repo: 'https://github.com/yosoyfunes/nodejs-helloworld-api.git'
    #     dest: "{{ app_dir }}"
    #     force: yes

    # - name: Instalar dependencias de Node.js
    #   command: npm install
    #   args:
    #     chdir: "{{ app_dir }}" 

    # - name: Instalar pm2 globalmente
    #   npm:
    #     name: pm2
    #     global: yes
    #     state: present

    # # ------------------------------------------------------------------
    # # 3. Supervisor configura Nginx + pm2
    # - name: Instalar supervisor
    #   ansible.builtin.apt:
    #     name: supervisor
    #     state: present
    #     update_cache: yes

    # - name: Plantilla de supervisor
    #   ansible.builtin.copy:
    #     dest: /etc/supervisor/conf.d/nginx_node.conf
    #     content: |
    #       [program:nginx]
    #       command=/usr/sbin/nginx -g 'daemon off;'
    #       autorestart=true
    #       priority=10

    #       [program:nodeapp]
    #       command=/usr/local/bin/pm2-runtime start {{ app_dir }}/index.js --name hello-api
    #       directory={{ app_dir }}
    #       autorestart=true
    #       priority=20

    # - name: Asegurar que supervisord esté corriendo
    #   shell: supervisord -c /etc/supervisor/supervisord.conf
    #   args:
    #     creates: /var/run/supervisord.pid

    # - name: Recargar configuración de supervisor
    #   command: supervisorctl reread

    # - name: Aplicar nueva configuración
    #   command: supervisorctl update

    # - name: Iniciar todos los servicios de supervisor
    #   command: supervisorctl start all

    # # ------------------------------------------------------------------
    # # 4. Health‑checks
    # - name: Esperar a que Node.js esté listo
    #   pause:
    #     seconds: 5
    #     prompt: "Esperando a que Node.js se inicialice..."

    # - name: Verificar que Node.js esté respondiendo
    #   uri:
    #     url: "http://localhost:3000/"
    #     method: GET
    #     status_code: 200
    #   retries: 5
    #   delay: 10

    # - name: Verificar que Nginx esté respondiendo
    #   uri:
    #     url: "http://localhost:80/"
    #     method: GET
    #     status_code: 200
    #   retries: 5
    #   delay: 5

    # - name: Mostrar resultado final
    #   debug:
    #     msg:
    #       - "=== DESPLIEGUE COMPLETADO EXITOSAMENTE ==="
    #       - "🌐 Servidor: {{ ansible_host }}"
    #       - "⚙️  Node.js API ejecutándose en puerto 3000"
    #       - "🌐 Nginx proxy ejecutándose en puerto 80"
    #       - ""
    #       - "🚀 Accede a la aplicación en: http://{{ ansible_host }}"
    #       - ""
    #       - "Para probar:"
    #       - "  curl http://{{ ansible_host }}/"
    #       - "  curl http://{{ ansible_host }}/nginx-health"
